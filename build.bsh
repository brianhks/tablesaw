/*
 * Copyright (c) 2009, Brian Hawkins
 * Permission is granted to use this code without restriction as long
 * as this copyright notice appears in all source files.
 */
 
import tablesaw.*;
import tablesaw.rules.*;
import tablesaw.addons.junit.*;
import tablesaw.addons.java.*;
//import tablesaw.java.*;

print("========================================================");
saw.setProperty("tablesaw.multiThreadOutput", "true");
 
blddir = "build";
classdir = blddir+"/classes";
//testclassdir = blddir+"/test/classes";
gensrcdir = blddir +"/gensrc";
srcdir = "src";
tstsrc = "test/src";
extdir = "lib";
etcdir = "etc";
intdir = extdir+"/interpreters";
tempdir = "temp";
jardir = blddir+"/jar";
buildVersion = "1.2.2";
versionSrcFile = "tablesaw/Version.java";
javaDocDir = "../tablesaw.javadoc";

/*
tstClassFiles = saw.substitute("(.*)\\.java", classdir+"/$1.class", tstSourceFiles);
tstClassFiles.addAll(classFiles);
 */
 
new DirectoryRule(blddir);
extJarFiles = new RegExFileSet(extdir, ".*\\.jar").recurse().getFullFilePaths();

distList = new String[] 
	{ 
	"beanshell",
	"jython",
	"groovy",
	"rhino"
	};
	
etcFiles = new RegExFileSet(etcdir, ".*").getFullFilePaths();

templateFiles = new RegExFileSet(srcdir, ".*")
		.setStartDir("tablesaw/templates")
		.recurse().getFilePaths();
	
classpath = new Classpath(extJarFiles);

saw.addSearchPath(".*\\.java", gensrcdir);
saw.addSearchPath(".*\\.java", tstsrc);

//saw.createPatternDependency(".*", "build.bsh");

//-------------------------------------------------------------------
//==-- DIRECTORY RULES --==

docDirRule = new DirectoryRule(javaDocDir);
new DirectoryRule(tempdir);
genDirRule = new DirectoryRule(gensrcdir+"/tablesaw");

//-------------------------------------------------------------------
//Override the clean rule to only remove the build directory
cleanRule = new SimpleRule("clean").setDescription("Removes the build directory")
		.setMakeAction("doClean");
		
void doClean(Rule rule)
	{
	saw.deltree(blddir);
	}

//-------------------------------------------------------------------
//==-- VERSION RULE --==
versionRule = new SimpleRule().setMakeAction("createVersionClass")
		.addTarget(gensrcdir+"/"+versionSrcFile)
		.addDepend(genDirRule)
		.addDepend("build.bsh");
void createVersionClass(Rule rule)
	{
	print("Creating version class");
					
	dateFormat = new java.text.SimpleDateFormat("yyyyMMddHHmmss");
					
	verClass = new PrintWriter(new FileWriter(gensrcdir+"/"+versionSrcFile));
	verClass.println("//This file is generated in the build script");
	verClass.println("package tablesaw;");
	verClass.println("class Version");
	verClass.println("\t{");
	verClass.println("\tpublic static String getVersion() { return (\""+
			buildVersion+"\");}");
	verClass.println("\tpublic static String getBuild() { return (\""+
			dateFormat.format(new Date())+"\");}");
	verClass.println("\t}");
	verClass.close();
	}

//-------------------------------------------------------------------
//==-- COMPILE --==
saw.setProperty("tablesaw.java.program.source_directory", srcdir);
saw.setProperty("tablesaw.java.program.class_directory", classdir);
saw.setProperty("tablesaw.java.program.test_source_directory", tstsrc);

jp = new JavaProgram().setProgramName("tablesaw-"+buildVersion).setup();
jc = jp.getCompileRule();
jc.addClasspath(classpath);
jc.addSource(versionSrcFile);
jc.addDepend(versionRule);
jc.getDefinition().set("target", "1.5");

jp.getTestCompileRule().addClasspath(classpath);

jp.getJarRule().setManifest("manifest.txt")
		.addFile("license.txt")
		.addFiles(srcdir, templateFiles)
		.addFiles(etcFiles)
		.addFile("src", "tablesaw/addons/ivy/pom.xsl")
		.addFile("src", "tablesaw/tablesaw.properties");
		
saw.setDefaultTarget("jar");


//------------------------------------------------------------------------------
//==-- COMPILE TEST CODE --==
/* compileTestRule = new JavaCRule("compile-tests", testclassdir)
		.addSourceDir("test/src")
		.addClasspath(classpath)
		.addClasspath(jp.getClassOutDir())
		.addDepend(jp); */

//-------------------------------------------------------------------
//==-- UNIT TESTS --==
testSources = new RegExFileSet("test/src", ".*Tests\\.java").recurse()
		.addFile("test/src", "tablesaw/TablesawTest.java").getFullFilePaths();
testClasspath = new Classpath(classpath.getPaths()).addPath(jp.getJarRule().getTarget())
		.addPath(jp.getTestCompileRule().getBuildDirectory());
testRule = new JUnitRule("test")
		.addDepend(jp.getTestCompileRule())
		.addDepend(tempdir)
		.addDepend("jar")
		.addSources(testSources)
		.setClasspath(testClasspath);
		
		
//-------------------------------------------------------------------
//==-- JAVADOC DOCUMENTATION --==	
new SimpleRule("javadoc").setMakeAction("doJavadoc").override()
		.addDepend(docDirRule);
void doJavadoc(Rule rule)
	{
	//cmd = "javadoc -classpath "+classpath+" -sourcepath src -public -d doc tablesaw";
	cmd = "javadoc -classpath "+classpath+" -sourcepath src -public -d "+javaDocDir+" "+
			"tablesaw tablesaw.rules tablesaw.ant tablesaw.definitions tablesaw.addons.c "+
			"tablesaw.addons tablesaw.addons.java tablesaw.java tablesaw.addons.csharp "+
			"tablesaw.addons.ivy tablesaw.addons.junit";
	
	saw.exec(cmd);
	}
	
//------------------------------------------------------------------------------
//==-- BUILD SLICK XML PARSER --==
new SimpleRule("slickxml").setDescription("Build slickxml parser")
		.setMakeAction("doSlickXML");
		
void doSlickXML(Rule rule)
	{
	cmd = "java -cp "+classpath+" slickxml.SlickParser etc/slick_config.xml";
	
	saw.exec(cmd);
	}
	
//-------------------------------------------------------------------
//==-- CREATE DISTRIBUTION JAR FILES --==
/* saw.createPhonyRule("dist", jarfile, null);

for (dist : distList)
	{
	saw.createDirectoryRule(tempdir+"/"+dist, null, true);
	saw.createPhonyRule(dist, tempdir+"/"+dist, "extractJars");
	saw.createRecursiveCopyRule("copytablesawTo"+dist, new String[] {"compile"}, 
			blddir, ".*", tempdir+"/"+dist);
	distjar = jardir+"/tablesaw_"+dist+".jar";
	saw.createExplicitRule(distjar, new String[]
			{
			dist,
			jardir,
			"compile",
			"copytablesawTo"+dist,
			}, "createDistJar", true);
	saw.createExplicitDependency("dist", distjar);
	}

extractJars(String target, String[] prereqs)
	{
	print("Extracting "+target);
	extractList = saw.createFileList(intdir+"/"+target, ".*\\.jar", 
			saw.INCLUDE_PATH);
	for (jar : extractList)
		saw.exec(prereqs[0], "jar -xf ../../"+jar, true);
	}
	
createDistJar(String target, String[] prereqs)
	{
	print("Creating "+target);
	rm(target);
	String cmd = "jar -cfm "+target+" manifest.txt license.txt -C "+
			tempdir+"/"+prereqs[0]+" .";
			
	saw.exec(cmd);
	} */
	


//-------------------------------------------------------------------
//==-- COMPILE TEST CODE --==
/*saw.createPhonyRule("test", "onejar", "test");
void test(String target, String[] prereqs)
	{
	print("running test");
	cwd = "test/c++";
	saw.exec(cwd, "java -cp ../../jar/tablesaw.jar tablesaw.Tablesaw -f build.bsh clean test", true);
	saw.exec(cwd, "java -cp ../../jar/tablesaw.jar tablesaw.Tablesaw -f build.py clean test clean", true);
	//saw.exec(cwd, "java -cp ../../jar/tablesaw.jar tablesaw.Tablesaw -f build.groovy clean test clean", true);
	
	cwd = "test/java";
	saw.exec(cwd, "java -cp ../../jar/tablesaw.jar tablesaw.Tablesaw -f build.bsh clean test", true);
	saw.exec(cwd, "java -cp ../../jar/tablesaw.jar tablesaw.Tablesaw -f build.py clean test clean", true);
	//saw.exec(cwd, "java -cp ../../jar/tablesaw.jar tablesaw.Tablesaw -f build.groovy clean test clean", true);
	}*/
